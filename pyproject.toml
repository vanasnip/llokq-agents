[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "unified-agents"
version = "0.1.0"
description = "Unified D3P-SuperClaude Agent System"
readme = "README.md"
authors = [
    {name = "AI Agent Development Team"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
]
requires-python = ">=3.8"
dependencies = [
    "pyyaml>=6.0",
    "click>=8.0",
    "rich>=13.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/agents"
Issues = "https://github.com/yourusername/agents/issues"

[project.scripts]
unified-agents = "unified.cli:cli"
ua = "unified.cli:cli"

[tool.setuptools.packages.find]
include = ["unified*", "design_agents*", "dev_agents*", "d3p*"]

[tool.setuptools.package-data]
"*" = ["*.yml", "*.yaml", "*.md"]

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]
fix = true

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"tests/*" = ["ARG", "S101"]

[tool.ruff.isort]
known-first-party = ["unified"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.coverage.run]
source = ["unified"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]